/*
 * @Author: Clark
 * @Email: haixuanwoTxh@gmail.com
 * @Date: 2024-11-12 10:36:42
 * @LastEditors: Clark
 * @LastEditTime: 2024-11-12 11:45:37
 * @Description: file content
 */

/*
条款46：需要类型转换时请为模板定义非成员函数
在设计模板类时，通常希望它能够与其他类型兼容。
通过定义非成员函数来实现类型转换是一个高效的方法，因为这样做可以增强类型的互操作性，
同时保持类的封装性和职责单一性。
*/

template<typename T>
class Point {
public:
    Point(T x = 0, T y = 0) : x_(x), y_(y) {}

private:
    T x_, y_;

    friend Point<T> operator+(const Point<T>& lhs, const Point<T>& rhs) {
        return Point<T>(lhs.x_ + rhs.x_, lhs.y_ + rhs.y_);
    }
};

// 非成员函数实现类型转换
template<typename T, typename U>
Point<T> convertToPoint(const Point<U>& other) {
    return Point<T>(static_cast<T>(other.x_), static_cast<T>(other.y_));
}
